<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[cookie存储购物车信息]]></title>
    <url>%2F2019%2F03%2F28%2Fcookie%E5%AD%98%E5%82%A8%E8%B4%AD%E7%89%A9%E8%BD%A6%E4%BF%A1%E6%81%AF%2F</url>
    <content type="text"><![CDATA[Cookie 直接使用document.cookie设置或者获取cookie,cookie格式为键值对 清空购物车 将购物车中内容清空并且清除cookie 清除cookie的方法是直接设置cookie的到期时间为一个早于当前时间的时间。 123var now=new Date();now.setDate(now.getDate()-7);document.cookie=&apos;cartlist=xx;expires=&apos; + now; 添加商品 window.event.target获取被点击的元素。 添加addEventListener监听点击事件，更新cookie DOM操作 tagName获取元素的标签 parentElement获取父元素 children获取所有子元素 getAttribute('data-guid')获取data-guid属性值 setAttribute('data-guid')设置data-guid属性值 nextElementSibling 返回指定元素之后的下一个兄弟元素（不包括文本节点、注释节点） location.reload() 刷新页面 向表格插入新行 12345var x=document.getElementById(&apos;myTable&apos;).insertRow(0)//insertRow参数为插到第几行 var y=x.insertCell(0) var z=x.insertCell(1) y.innerHTML=&quot;NEW CELL1&quot; z.innerHTML=&quot;NEW CELL2&quot; 插入新节点 1234var h=document.createElement(&quot;H1&quot;);//创建 &quot;H1&quot; 元素var t=document.createTextNode(&quot;Hello World&quot;);//创建一个文本节点h.appendChild(t);document.body.appendChild(h); Demo cookie和session 理解Cookie和Session机制]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>开发</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js捕获和冒泡]]></title>
    <url>%2F2019%2F03%2F27%2Fjs%E6%8D%95%E8%8E%B7%E5%92%8C%E5%86%92%E6%B3%A1%2F</url>
    <content type="text"><![CDATA[概念[1] 事件捕获（event capturing）：通俗的理解就是，当鼠标点击或者触发dom事件时，浏览器会从根节点开始由外到内进行事件传播，即点击了子元素，如果父元素通过事件捕获方式注册了对应的事件的话，会先触发父元素绑定的事件。 事件冒泡（dubbed bubbling）：与事件捕获恰恰相反，事件冒泡顺序是由内到外进行事件传播，直到根节点。 dom标准事件流的触发的先后顺序为：先捕获再冒泡 事件处理函数 addEventListener addEventListener(event, listener, useCapture) event:需要绑定的事件（事件名称，如click，不带on） listener:事件监听函数 useCapture: 默认值是false，表示在事件冒泡阶段调用事件处理函数;如果参数为true，则表示在事件捕获阶段调用处理函数。 e.stopPropagation(); 阻止冒泡 事件捕获和事件冒泡一起存在[2] 当事件捕获和事件冒泡一起存在的情况，事件又是如何触发呢。 这里记被点击的DOM节点为target节点 document 往 target节点，捕获前进，遇到注册的捕获事件立即触发执行 到达target节点，触发事件（对于target节点上，是先捕获还是先冒泡则捕获事件和冒泡事件的注册顺序，先注册先执行） target节点 往 document 方向，冒泡前进，遇到注册的冒泡事件立即触发 JavaScript 详说事件机制之冒泡、捕获、传播、委托 ↩ JS中事件冒泡与捕获 ↩]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>Day Day Up</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[仿网易云音乐图片轮播效果]]></title>
    <url>%2F2019%2F03%2F27%2F%E4%BB%BF%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E5%9B%BE%E7%89%87%E8%BD%AE%E6%92%AD%E6%95%88%E6%9E%9C%2F</url>
    <content type="text"><![CDATA[技术点 父子组件通信 通过props传递数据 子组件 12345props: &#123;//需要获取的数据 width: &#123; type: Number &#125;&#125; 父组件 1234567data () &#123; return &#123; setting: &#123; width: 1000 &#125; &#125;&#125; 绝对定位 绝对定位脱离标准流，所以父元素一般要设定宽高 图片滤镜效果filter filter:brightness(0.3)图片变亮变暗 图片切换效果 transition: 500ms all ease-in-out;持续时间/为所有属性设置变换效果/效果为以慢速开始和结束的过渡效果 bug 样式重叠,上层是透明元素,下层元素可见,但会出现无法点击的效果 github地址 https://github.com/RandomVar/Image-Rotation-Conponent]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ajax和CORS跨域]]></title>
    <url>%2F2019%2F03%2F25%2Fajax%E5%92%8CCORS%E8%B7%A8%E5%9F%9F%2F</url>
    <content type="text"><![CDATA[What’s ajax In a traditional web page you can’t update small portion without reloading page. So here Ajax is help us to background server calls for fetching data and update new contain without reloading page. Advantages 不用刷新页面，数据与界面分离 异步通信 负载均衡，按需取数据 This object allows you to making HTTP requests and receive responses from the server in the background, without requiring the user to submit the page to the server (without round trip process). Using DOM to manipulate received data from the server and make responsive contents are added into live page without user/visual interruptions. Disadvantages search engines would not be able to index an AJAX application 无法跨域 对于html5，可以使用CORS实现跨域 开发者会暴露一定数据和服务器逻辑 How to work Client side user perform action to generate event that event call to a JavaScript function. JavaScript function create XMLHttpRequest object, XMLHttpRequest object specify the JavaScript callback function. JavaScript XMLHttpRequest object call as a asynchronous HTTP request to the Server. Web Server process the request and return XML contain data. XMLHttpRequest object calls to a callback function along with response from the web server. Client browser updates the HTML DOM representing the web page along with new data. Usage Define instance of this XMLHttpRequest object var xhr = new XMLHttpRequest(); Initialize open() method xhr.open(&quot;GET&quot;, &quot;demo_textfile.txt&quot;, true); Specifies the HTTP method. Valid value GET, POST, HEAD, PUT, DELETE, OPTIONS Specifies URL. Specifies whether the request should be handled asynchronously or not. Request send using send() method xhr.send(); onreadystatechange Event To Set Callback Function Using onreadystatechange event to set callback (handler) function to be executed when the status of the request changes 1234//Response text received from server that data assign into textarea tag using DOM.xhr.onreadystatechange = function()&#123; document.getElementById(&quot;textArea&quot;).value = xhr.responseText; &#125;; readyState 123if (xhr.readyState == xhr.DONE) &#123; alert(xhr.responseText); &#125; status 200 OK 403 Forbidden 服务器已经理解请求，但是拒绝执行它。 404 Not Found 请求失败，请求所希望得到的资源未被在服务器上发现 408 Request Timeout 请求超时。 500 Internal Server Error 服务器遇到了不知道如何处理的情况。 123if ((xhr.status == 200) || (xhr.status == 0))&#123; alert(xhr.status); &#125; CORS跨域 (Cross-origin resource sharing) 简单请求 简单请求要满足： 请求方法是以下三种方法之一：HEAD;GET;POST HTTP的头信息不超出以下几种字段： Accept;Accept-Language;Content-Language;Last-Event-ID; Content-Type：只限于三个值application/x-www-form-urlencoded、multipart/form-data、text/plain 浏览器发送请求 123456GET /cors HTTP/1.1Origin: http://api.bob.com //本次请求来自哪个源（协议 + 域名 + 端口）Host: api.alice.comAccept-Language: en-USConnection: keep-aliveUser-Agent: Mozilla/5.0... 如果Origin指定的源，不在许可范围内，服务器会返回一个正常的HTTP回应。浏览器发现，这个回应的头信息没有包含Access-Control-Allow-Origin字段（详见下文），就知道出错了，从而抛出一个错误，被XMLHttpRequest的onerror回调函数捕获。注意，这种错误无法通过状态码识别，因为HTTP回应的状态码有可能是200。 服务端响应字段 Access-Control-Allow-Origin 它的值要么是请求时Origin字段的值，要么是一个*，表示接受任意域名的请求。 Access-Control-Allow-Credentials: true 表示是否允许发送Cookie Access-Control-Expose-Headers: FooBar 指定额外字段FooBar Content-Type: text/html; charset=utf-8 非简单请求 浏览器发现，这是一个非简单请求，就自动发出一个&quot;预检&quot;请求，要求服务器确认可以这样请求。 &quot;预检&quot;请求用的请求方法是OPTIONS，表示这个请求是用来询问的。 预检请求额外包含的两个方法： （1）Access-Control-Request-Method 列出浏览器的CORS请求会用到哪些HTTP方法。 （2）Access-Control-Request-Headers 指定浏览器CORS请求会额外发送的头信息字段 预检请求的回应 服务器收到&quot;预检&quot;请求以后，检查了Origin、Access-Control-Request-Method和Access-Control-Request-Headers字段以后，确认允许跨源请求，就可以做出回应。 如果浏览器否定了&quot;预检&quot;请求，会返回一个正常的HTTP回应，但是没有任何CORS相关的头信息字段。这时，浏览器就会认定，服务器不同意预检请求，因此触发一个错误。 预检请求同意后就可以发送正常请求 参考资料 AJAX way2tutorial 跨域资源共享 CORS 详解 其他资料 CORS 简单请求+预检请求（彻底理解跨域）]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>Day Day Up</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[阅读过的文章合集]]></title>
    <url>%2F2019%2F03%2F23%2F%E9%98%85%E8%AF%BB%E8%BF%87%E7%9A%84%E6%96%87%E7%AB%A0%E5%90%88%E9%9B%86%2F</url>
    <content type="text"><![CDATA[CSS篇 Better Layouts Through CSS Flexbox CSS flexbox的实例，实例中有的animation等也很棒 开发篇 登录那些事儿]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[浏览器渲染]]></title>
    <url>%2F2019%2F03%2F02%2F%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%2F</url>
    <content type="text"><![CDATA[看了一篇博客，并且懒得翻译 解析HTML,CSS,JS文件流程 浏览器读取原始字节（Bytes） the browser reads the raw bytes of HTML from your hard disk (or network) 原始字节（Bytes） =&gt; 字符（Characters） Firstly, the raw bytes of data are converted into characters. 字符（Characters） =&gt; 标记（tokens） An html file is broken down into small units of parsing called tokens. 标记（tokens） =&gt; 节点（node） After the tokenization is done, the tokens are then converted into nodes. 节点（node） =&gt; DOM The relationship between every node is established in this DOM object. 对于html来说建立了DOM，而对CSS来说则有CSSOM there’s also a CSS tree structure called the CSS Object Model, CSSOM for short. 加入CSS后的解析 当解析到css引入标签的时候，开始获取css文件 As soon the browser begins to parse the html, upon finding a link tag to a css file, it simultaneously makes a request to fetch that. 浏览器必须按CSS tree递归解析元素样式，因为会有一些继承父级元素的样式 Rhe browser has to recursively go through the CSS tree structure and determine the styles that affect a particular element. DOM + CSSOM = render tree The browser now combines the DOM and CSSOM trees into something called a render tree. render tree是DOM + CSSOM的结果，因此如果DOM节点元素在CSS中被隐藏了，它不会出现在render tree中 Note that if an element as been hidden by CSS e.g. by using display; none, the node will not be represented in the render tree. The hidden element will be present in the DOM but not the render tree. 重排（reflow） 计算元素在页面的布局位置 takes into consideration the content and style received from the DOM and CSSOM and does all the necessary layout computing. 绘图 “paints” the individual node to the screen. render blocking resources The DOM and CSSOM must be constructed before a successful paint, so both HTML and CSS are render blocking resources. DOM构建和CSS获取解析可同时进行 As soon as the parser reaches the line with &lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot;&gt; , a request is made to fetch the CSS file, style.css The DOM construction continues, and as soon as the CSS file returns with some content, the CSSOM construction begins. 加入JavaScript后的解析 遇到script标签则DOM构建暂停，直到script执行结束。因为JavaScript可以改变整个DOM和CSSOM Well, one of the most important things to remember is that whenever the browser encounters a script tag, the DOM construction is paused! The entire DOM construction process is halted until the script finishes executing. This is because JavaScript can alter both the DOM and CSSOM. Since the browser isn’t sure what this particular Javascript will do, it takes precaution by halting the entire DOM construction all together. 如果js在执行过程中遇到还未建立的css元素会停下来知道CSSOM构建完毕 So, what happens when the parser encounters a script tag but the CSSOM isn’t ready yet? The Javascript execution will be halted until the CSSOM is ready. 可以加入async参数使得DOM的构造不会因此停下来 If you add the async keyword to the script tag, the DOM construction will not be halted. &lt;script src=&quot;https://some-link-to-app.js&quot; async&gt;&lt;/script&gt; 关键渲染路径 critical rendering path All this while we have discussed the steps taken between receiving the HTML, CSS and JS bytes and turning them into rendered pixels on the screen. This entire process is called the critical rendering path. 参考博客： How browser rendering works — behind the scenes]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js中的异步操作]]></title>
    <url>%2F2019%2F02%2F11%2Fjs%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[同步与异步 同步(Synchronous)：调用一旦开始，调用者必须等到方法调用返回后，才能继续后续的行为。 异步(Asynchronous)： 一旦开始，方法调用就会立即返回，调用者就可以继续后续的操作。[1] 关于JS javascript是一门单线程语言，一切javascript版的&quot;多线程&quot;都是用单线程模拟出来的。 ES6语法：Promise[2] Promise的用法 123456789101112131415function A(resolve,reject)&#123; if()&#123; resolve() &#125; else&#123; reject() &#125;&#125;var p1 = new Promise(A);var p2 = p1.then(function S() &#123; console.log(&apos;成功：&apos;);&#125;);// 如果成功，执行这个函数：var p3 = p2.catch(function F() &#123; console.log(&apos;失败：&apos;);&#125;);// 当A函数执行失败时 简化if-else逻辑 1job1.then(job2).then(job3).catch(handleError); 其中，job1、job2和job3都是Promise对象。 Promise.all 12345678910var p1 = new Promise(function (resolve, reject) &#123; setTimeout(resolve, 500, &apos;P1&apos;);&#125;);var p2 = new Promise(function (resolve, reject) &#123; setTimeout(resolve, 600, &apos;P2&apos;);&#125;);// 同时执行p1和p2，并在它们都完成后执行then:Promise.all([p1, p2]).then(function (results) &#123; console.log(results); // 获得一个Array: [&apos;P1&apos;, &apos;P2&apos;]&#125;); p1、p2可以同时执行 Promise.race 123456789var p1 = new Promise(function (resolve, reject) &#123; setTimeout(resolve, 500, &apos;P1&apos;);&#125;);var p2 = new Promise(function (resolve, reject) &#123; setTimeout(resolve, 600, &apos;P2&apos;);&#125;);Promise.race([p1, p2]).then(function (result) &#123; console.log(result); &#125;); p1,p2只要一个成功执行，就可以继续执行then ES7语法：async-await[3] async-await的使用 async async用来表示函数是异步的，定义的函数会返回一个promise对象，可以使用then方法添加回调函数。 123456async function demo01() &#123; return 123;//相当于Promise.resolve(123)&#125;demo01().then(val =&gt; &#123; console.log(val);// 123&#125;); await await 必须出现在 async 函数内部，不能单独使用。 await的可以是普通函数也可以是promise，promise要等resolve了才能进行 12345678910111213function sleep(second, param) &#123; return new Promise((resolve, reject) =&gt; &#123; setTimeout(() =&gt; &#123; resolve(param); &#125;, second); &#125;)&#125;async function test() &#123; await sleep(2000, &apos;req01&apos;); await sleep(1000, &apos;req02&apos;); await sleep(500, &apos;req03&apos;);&#125; 处理reject 12345678async function errorDemoSuper() &#123; try &#123; let result = await sleep(1000); console.log(result); &#125; catch (err) &#123; console.log(err); &#125;&#125; 使用try-catch结构 可能会遇到的bug 123456async function forBugDemo() &#123; let arr = [1, 2, 3, 4, 5]; arr.forEach(item =&gt; &#123; await item; &#125;);&#125; 上面代码会报错，因为 await 用在普通函数之中了 JS的执行机制[4] 执行机制 同步和异步任务分别进入不同的执行&quot;场所&quot;，同步的进入主线程，异步的进入Event Table并注册函数。 当指定的事情完成时，Event Table会将这个函数移入Event Queue。 主线程内的任务执行完毕为空，会去Event Queue读取对应的函数，进入主线程执行 1234setTimeout(() =&gt; &#123; task()&#125;,3000)sleep(10000000) 执行步骤 task()进入Event Table并注册,计时开始。 执行sleep函数，很慢，非常慢，计时仍在继续。 3秒到了，计时事件timeout完成，task()进入Event Queue，等待sleep执行完毕。 sleep终于执行完了，task()终于从Event Queue进入了主线程执行。 setInterval setInterval会每隔指定的时间将注册的函数置入Event Queue 宏任务与微任务 任务可以分为 macro-task(宏任务)：包括整体代码script，setTimeout，setInterval的回调函数 micro-task(微任务)：Promise，process.nextTick的回调函数 js先执行所有当前队列中的宏任务，接着执行所有当前队列中的微任务。再执行所有当前队列中的宏任务，接着执行所有当前队列中的微任务……一直循环 示例 12345678new Promise(function(resolve) &#123; console.log(&apos;promise&apos;); resolve()&#125;).then(function() &#123; console.log(&apos;then&apos;);&#125;)console.log(&apos;console&apos;); 结果为promise,console,then promise resolve后then中的任务进入微任务队列 同步(Synchronous)和异步(Asynchronous) ↩ Promise - 廖雪峰的官方网站 ↩ ES6系列文章 异步神器async-await - 一步前端 - SegmentFault 思否 ↩ 这一次，彻底弄懂 JavaScript 执行机制 - 掘金 ↩]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>Day Day Up</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[javascript的闭包和回调函数]]></title>
    <url>%2F2019%2F02%2F11%2Fjavascript%E7%9A%84%E9%97%AD%E5%8C%85%E5%92%8C%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[看到几篇不错的文章 闭包[1] 使用返回一个内部函数的方法获取函数内部定义的局部变量 12345678function A()&#123; var a; function B()&#123; return a &#125; return B()&#125;A()//可在函数外面访问函数的内部变量a 1234567891011function showName (firstName, lastName) &#123;var nameIntro = &quot;Your name is &quot;; // this inner function has access to the outer function&apos;s variables, including the parameterfunction makeFullName () &#123; return nameIntro + firstName + &quot; &quot; + lastName; &#125;return makeFullName ();&#125;showName (&quot;Michael&quot;, &quot;Jackson&quot;); // Your name is Michael Jackson 外部函数返回后闭包还可以访问外部函数的变量 12345678910111213function celebrityName (firstName) &#123; var nameIntro = &quot;This celebrity is &quot;; function lastName (theLastName) &#123; return nameIntro + firstName + &quot; &quot; + theLastName; &#125; return lastName;&#125;var mjName = celebrityName (&quot;Michael&quot;); // At this juncture, the celebrityName outer function has returned.// The closure (lastName) is called here after the outer function has returned above// Yet, the closure still has access to the outer function&apos;s variables and parametermjName (&quot;Jackson&quot;); // !!This celebrity is Michael Jackson 闭包存储的是对外部变量的引用 1234567891011121314151617function celebrityID () &#123; var celebrityID = 999; return &#123; getID: function () &#123; // It will return the current value of celebrityID, even after the changeTheID function changes it return celebrityID; &#125;, setID: function (theNewID) &#123; // This inner function will change the outer function&apos;s variable anytime celebrityID = theNewID; &#125; &#125;&#125;var mjID = celebrityID (); // At this juncture, the celebrityID outer function has returned.mjID.getID(); // 999mjID.setID(567); // Changes the outer function&apos;s variablemjID.getID(); // 567: It returns the updated celebrityId variable 外部函数的值改变后闭包返回的是改变后的值 闭包在循环时会导致错误 123456789101112131415function celebrityIDCreator (theCelebrities) &#123; var i; var uniqueID = 100; for (i = 0; i &lt; theCelebrities.length; i++) &#123; theCelebrities[i][&quot;id&quot;] = function () &#123; return uniqueID + i; &#125; &#125; return theCelebrities;&#125;var actionCelebs = [&#123;name:&quot;Stallone&quot;, id:0&#125;, &#123;name:&quot;Cruise&quot;, id:0&#125;, &#123;name:&quot;Willis&quot;, id:0&#125;];var createIdForActionCelebs = celebrityIDCreator (actionCelebs);var stalloneID = createIdForActionCelebs [0];console.log(stalloneID.id()); // 103 内部匿名函数中的i的值都将是3,即i最后更新完后的值 为避免错误应使用Immediately Invoked Function Expression (IIFE) 12345678910111213141516171819202122function celebrityIDCreator (theCelebrities) &#123; var i; var uniqueID = 100; for (i = 0; i &lt; theCelebrities.length; i++) &#123; theCelebrities[i][&quot;id&quot;] = function (j) &#123; // the j parametric variable is the i passed in on invocation of this IIFE return function () &#123; return uniqueID + j; // each iteration of the for loop passes the current value of i into this IIFE and it saves the correct value to the array &#125; () // BY adding () at the end of this function, we are executing it immediately and returning just the value of uniqueID + j, instead of returning a function. &#125; (i); // immediately invoke the function passing the i variable as a parameter &#125; return theCelebrities;&#125;var actionCelebs = [&#123;name:&quot;Stallone&quot;, id:0&#125;, &#123;name:&quot;Cruise&quot;, id:0&#125;, &#123;name:&quot;Willis&quot;, id:0&#125;];var createIdForActionCelebs = celebrityIDCreator (actionCelebs);var stalloneID = createIdForActionCelebs [0];console.log(stalloneID.id); // 100var cruiseID = createIdForActionCelebs [1];console.log(cruiseID.id); // 101 回调函数[2] 定义 被作为参数传递给另一个函数的函数被称为回调函数 回调函数中含有this出现的问题 12345678910111213141516171819202122232425// Define an object with some properties and a method// We will later pass the method as a callback function to another functionvar clientData = &#123; id: 094545, fullName: &quot;Not Set&quot;, // setUserName is a method on the clientData object setUserName: function (firstName, lastName) &#123; // this refers to the fullName property in this object this.fullName = firstName + &quot; &quot; + lastName; &#125;&#125;function getUserInput(firstName, lastName, callback) &#123; // Do other stuff to validate firstName/lastName here // Now save the names callback (firstName, lastName);&#125;getUserInput (&quot;Barack&quot;, &quot;Obama&quot;, clientData.setUserName);console.log (clientData.fullName);// !!Not Set// The fullName property was initialized on the window objectconsole.log (window.fullName); // !!Barack Obama 回调函数中含有this指针，但它最终传递给了一个全局函数，它将指向全局对象，而非包含它的对象 使用apply保护this指针 12345678910//Note that we have added an extra parameter for the callback object, called &quot;callbackObj&quot;function getUserInput(firstName, lastName, callback, callbackObj) &#123; // The use of the Apply function below will set the this object to be callbackObj callback.apply (callbackObj, [firstName, lastName]);&#125;// We pass the clientData.setUserName method and the clientData object as parameters. The clientData object will be used by the Apply function to set the this objectgetUserInput (&quot;Barack&quot;, &quot;Obama&quot;, clientData.setUserName, clientData);// the fullName property on the clientData was correctly setconsole.log (clientData.fullName); // Barack Obama 回调函数的使用[3] 回调函数示例 123456789101112var doit = function(callback)&#123; var a = 1, b = 2, c = 3; var t = callback(a,b,c); return t + 10;&#125;;var d = doit(function(x,y,z)&#123; return (x+y+z);&#125;);console.log(d); 使用回调保证事件执行顺序 12345678910111213function hello()&#123; setTimeout( function()&#123; console.log( &apos;hello&apos; ); &#125;, 1000 );&#125; function world()&#123; console.log(&apos;world&apos;);&#125;hello();world(); hello事件执行时间比较长，因此会先执行world。此时可以使用回调函数。 Understand JavaScript Closures With Ease ↩ Understand JavaScript Callback Functions and Use Them ↩ 理解javascript中的回调函数(callback) ↩]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>Day Day Up</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue的生命周期]]></title>
    <url>%2F2019%2F02%2F11%2FVue%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%2F</url>
    <content type="text"><![CDATA[关于Vue生命周期的理解，但应该有很多地方不严谨，也可能出现理解方面的偏差。 生命周期 beforeCreate~created 完成初始化事件，创建实例，绑定属性 $el 属性目前不可见 created~beforeMount 判断对象是否有el选项。如果有的话就继续向下编译，如果没有el选项，则停止编译，直到在该vue实例上调用vm.$mount(el)（手动挂载实例） 如果有template则编译template，否则编译外部html 此阶段完成了el的初始化,有了虚拟的dom beforeMount~mounted 模板编译/挂载(create vm.$el and replace “el” with it) 用编译好的html替换vue实例上el属性指向的dom对象或替换对应html标签里面的内容 虚拟dom变成真实dom,这里可以发送http请求页面初始化需要的数据 beforeUpdate~update 数据发生变化-&gt;beforeUpdate(此时数据已经更新)-&gt;重新渲染虚拟DOM，再给对应位置的真是DOM打补丁（VirtualDOM re-render and patch） -&gt;update beforeDestroy~destroyed beforeDestory：实例被销毁之前执行 Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。 [1] 相关知识 el挂载点 el提供的元素只能作为挂载点。不同于 Vue 1.x，所有的挂载元素会被 Vue 生成的 DOM 替换。因此不推荐挂载 root 实例到 &lt;html&gt; 或者 &lt;body&gt; 上。 如果你选了某一个元素作为挂载点，例如el:’#app’，那么id=&quot;app&quot;的这个元素只能被用来作为挂载点，表现为，无论你在该元素内写什么，最终都会被替换掉，不会显示出来。因此如果挂载到这两个元素上，页面就会没&lt;html&gt;标签或者&lt;body&gt;标签[2] render函数 render函数是渲染一个视图，然后提供给el挂载 vue.2.0的渲染过程： 1.首先需要了解这是 es 6 的语法，表示 Vue 实例选项对象的 render 方法作为一个函数，接受传入的参数 h 函数，返回 h(App) 的函数调用结果。 2.其次，Vue 在创建 Vue 实例时，通过调用 render 方法来渲染实例的 DOM 树。 3.最后，Vue 在调用 render 方法时，会传入一个 createElement 函数作为参数，也就是这里的 h 的实参是 createElement 函数，然后 createElement 会以 APP 为参数进行调用[3] 可以直接调用render函数createElement,调用优先于template 123render: function(createElement) &#123; return createElement(&apos;h1&apos;, &apos;this is createElement&apos;) &#125; 服务端上的生命周期[4] 由于没有动态更新，所有的生命周期钩子函数中，只有 beforeCreate 和 created 会在服务器端渲染 (SSR) 过程中被调用。这就是说任何其他生命周期钩子函数中的代码（例如 beforeMount 或 mounted），只会在客户端执行。 参考资料 详解vue生命周期 Vue2.0 探索之路——生命周期和钩子函数的一些理解 个人理解的VueJS生命周期以及其中钩子函数的实际应用 Vue生命周期 ↩ vue的选项的el疑惑 ↩ Vue2.0 render:h =&gt; h(App) ↩ 编写通用代码 | Vue SSR 指南 ↩]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Day Day Up</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F01%2F24%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Hexo日常使用指南 更新博客内容的操作 hexo new title //新建博文s hexo clean //清除缓存 hexo g //生成静态文件 hexo s //启动Hexo本地服务器 hexo d //部署 Next主题配置 参考博文 Hexo的Next主题详细配置 其他配置 使用支持更广泛的markdown插件 hexo-renderer-markdown-it 插件 详解]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>博客搭建</tag>
      </tags>
  </entry>
</search>
